import { useLocation } from "react-router-dom";
import { Card, Spin, Alert, Button, message, Modal } from "antd";
import { useBookingById } from "../features/booking/hooks/useGetBookingId";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import axios, { AxiosError } from "axios";
import dayjs from "dayjs";
import StatusTag from "../components/TagStatus";

const API_BASE_URL =
  "http://skincare-sbs.southeastasia.azurecontainer.io:8080/api/Booking";

const CustomerBookingDetail = () => {
  const location = useLocation();
  const { bookingId } = location.state || {};
  const queryClient = useQueryClient();

  console.log("üîç Booking ID t·ª´ URL:", bookingId);
  const validBookingId = bookingId ? String(bookingId) : "";

  const {
    data: booking,
    isLoading,
    isError,
    error,
  } = useBookingById(validBookingId);

  // Mutation ƒë·ªÉ h·ªßy ƒë·∫∑t l·ªãch
  const cancelBookingMutation = useMutation({
    mutationFn: async () => {
      if (!validBookingId) {
        throw new Error("Booking ID kh√¥ng h·ª£p l·ªá");
      }

      const cancelUrl = `${API_BASE_URL}/cancelled/${validBookingId}`;
      console.log("üîÑ G·ª≠i request h·ªßy booking:", cancelUrl);

      try {
        const response = await axios.put(cancelUrl);
        console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ server:", response.data);
        return response.data;
      } catch (err) {
        console.error("‚ùå L·ªói khi h·ªßy booking:", err);
        throw err;
      }
    },
    onSuccess: () => {
      message.success("‚úÖ ƒê√£ h·ªßy ƒë·∫∑t l·ªãch th√†nh c√¥ng!");
      queryClient.invalidateQueries({
        queryKey: ["getBookingById", validBookingId],
      }); // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu m√† kh√¥ng c·∫ßn chuy·ªÉn trang
    },
    onError: (error) => {
      const axiosError = error as AxiosError;
      console.error(
        "‚ùå H·ªßy th·∫•t b·∫°i:",
        axiosError.response?.data || axiosError.message
      );
      message.error(
        `‚ùå H·ªßy th·∫•t b·∫°i: ${axiosError.response?.data || axiosError.message}`
      );
    },
  });

  if (!validBookingId) {
    return (
      <div
        style={{ padding: "24px", background: "#f5f1eb", minHeight: "100vh" }}
      >
        <Card
          title="Chi ti·∫øt ƒë·∫∑t l·ªãch"
          bordered={false}
          style={{ maxWidth: 600, margin: "auto" }}
        >
          <Alert message="‚ùå L·ªói: Booking ID kh√¥ng h·ª£p l·ªá!" type="error" />
        </Card>
      </div>
    );
  }

  return (
    <div style={{ padding: "24px", background: "#f5f1eb", minHeight: "100vh" }}>
      <Card
        title="Chi ti·∫øt ƒë·∫∑t l·ªãch"
        bordered={false}
        style={{ maxWidth: 600, margin: "auto" }}
      >
        {isLoading ? (
          <Spin tip="üîÑ ƒêang t·∫£i chi ti·∫øt ƒë·∫∑t l·ªãch..." />
        ) : isError ? (
          <Alert
            message={`‚ùå L·ªói: ${error?.message || "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu"}`}
            type="error"
          />
        ) : booking ? (
          <>
            <p>
              <strong>M√£ ƒë·∫∑t l·ªãch:</strong> {booking.bookingId}
            </p>
            <p>
              <strong>D·ªãch v·ª•:</strong> {booking.serviceName}
            </p>
            <p>
              <strong>Ng√†y ƒë·∫∑t:</strong>{" "}
              {dayjs(booking.date).format("DD/MM/YYYY HH:mm")}
            </p>
            <p>
              <strong>Tr·∫°ng th√°i:</strong> <StatusTag status={booking.status} />
            </p>
            <p>
              <strong>ƒê·ªãa ƒëi·ªÉm:</strong> {booking.location}
            </p>
            <p>
              <strong>Nh√¢n vi√™n:</strong> {booking.skintherapistName}
            </p>
            <p>
              <strong>Gi√° ti·ªÅn:</strong> {booking.amount.toLocaleString()} VND
            </p>
            <p>
              <strong>Ng√†y t·∫°o:</strong>{" "}
              {dayjs(booking.createdAt).format("DD/MM/YYYY HH:mm")}
            </p>
            <p>
              <strong>Ng√†y c·∫≠p nh·∫≠t:</strong>{" "}
              {dayjs(booking.updateAt).format("DD/MM/YYYY HH:mm")}
            </p>

            {/* N√∫t H·ªßy ƒê·∫∑t L·ªãch */}
            {booking.status !== "Cancelled" && (
              <Button
                type="primary"
                danger
                onClick={() => {
                  Modal.confirm({
                    title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t l·ªãch?",
                    content: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
                    okText: "H·ªßy l·ªãch",
                    cancelText: "ƒê√≥ng",
                    onOk: () => cancelBookingMutation.mutate(),
                  });
                }}
                loading={cancelBookingMutation.isPending}
              >
                H·ªßy ƒê·∫∑t L·ªãch
              </Button>
            )}
          </>
        ) : (
          <Alert
            message="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t l·ªãch"
            type="warning"
          />
        )}
      </Card>
    </div>
  );
};

export default CustomerBookingDetail;
