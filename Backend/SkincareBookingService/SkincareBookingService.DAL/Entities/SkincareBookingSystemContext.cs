// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SkincareBookingService.DAL.Entities;

public partial class SkincareBookingSystemContext : DbContext
{
    public SkincareBookingSystemContext(DbContextOptions<SkincareBookingSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerSurvey> CustomerSurveys { get; set; }

    public virtual DbSet<CustomerSurveyAnswer> CustomerSurveyAnswers { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<QuizAnswer> QuizAnswers { get; set; }

    public virtual DbSet<QuizQuestion> QuizQuestions { get; set; }

    public virtual DbSet<QuizQuestionSet> QuizQuestionSets { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<SkinTherapist> SkinTherapists { get; set; }

    public virtual DbSet<SkinTherapistService> SkinTherapistServices { get; set; }

    public virtual DbSet<SkinType> SkinTypes { get; set; }

    public virtual DbSet<SkintypeService> SkintypeServices { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__F267251E9E4D1C6E");

            entity.ToTable("Account");

            entity.Property(e => e.AccountId).HasColumnName("accountId");
            entity.Property(e => e.AccountName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("accountName");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .HasColumnName("role");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__FA0AA72D075819E8");

            entity.ToTable("Blog");

            entity.HasIndex(e => e.CustomerId, "IX_Blog_customerId");

            entity.Property(e => e.BlogId).HasColumnName("blogId");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.Customer).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Blog__customerId__6B24EA82");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__C6D03BCD7E8456A4");

            entity.ToTable("Booking");

            entity.HasIndex(e => e.CustomerId, "IX_Booking_customerId");

            entity.HasIndex(e => e.SkintherapistId, "IX_Booking_skintherapistId");

            entity.Property(e => e.BookingId).HasColumnName("bookingId");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasColumnName("location");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(255)
                .HasColumnName("serviceName");
            entity.Property(e => e.SkintherapistId).HasColumnName("skintherapistId");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateAt)
                .HasColumnType("datetime")
                .HasColumnName("updateAt");

            entity.HasOne(d => d.Customer).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Booking__custome__5812160E");

            entity.HasOne(d => d.Skintherapist).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.SkintherapistId)
                .HasConstraintName("FK__Booking__skinthe__59063A47");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__B611CB7DEFF47A3D");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.AccountId, "IX_Customer_accountId");

            entity.HasIndex(e => e.SkintypeId, "IX_Customer_skintypeId");

            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.AccountId).HasColumnName("accountId");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.SkintypeId).HasColumnName("skintypeId");

            entity.HasOne(d => d.Account).WithMany(p => p.Customers)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Customer__accoun__4E88ABD4");

            entity.HasOne(d => d.Skintype).WithMany(p => p.Customers)
                .HasForeignKey(d => d.SkintypeId)
                .HasConstraintName("FK__Customer__skinty__4D94879B");
        });

        modelBuilder.Entity<CustomerSurvey>(entity =>
        {
            entity.HasKey(e => e.CustomersurveyId).HasName("PK__Customer__500667325476DE3A");

            entity.ToTable("CustomerSurvey");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerSurvey_customerId");

            entity.HasIndex(e => e.QuestionsId, "IX_CustomerSurvey_questionsId");

            entity.HasIndex(e => e.SkintypeId, "IX_CustomerSurvey_skintypeId");

            entity.Property(e => e.CustomersurveyId).HasColumnName("customersurveyId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.QuestionsId).HasColumnName("questionsId");
            entity.Property(e => e.SkintypeId).HasColumnName("skintypeId");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerSurveys)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__CustomerS__custo__06CD04F7");

            entity.HasOne(d => d.Questions).WithMany(p => p.CustomerSurveys)
                .HasForeignKey(d => d.QuestionsId)
                .HasConstraintName("FK__CustomerS__quest__05D8E0BE");

            entity.HasOne(d => d.Skintype).WithMany(p => p.CustomerSurveys)
                .HasForeignKey(d => d.SkintypeId)
                .HasConstraintName("FK__CustomerS__skint__04E4BC85");
        });

        modelBuilder.Entity<CustomerSurveyAnswer>(entity =>
        {
            entity.HasKey(e => e.CustomersurveyanswerId).HasName("PK__Customer__7C419B23EC9362B1");

            entity.ToTable("CustomerSurveyAnswer");

            entity.HasIndex(e => e.AnswerId, "IX_CustomerSurveyAnswer_answerId");

            entity.HasIndex(e => e.CustomersurveyId, "IX_CustomerSurveyAnswer_customersurveyId");

            entity.Property(e => e.CustomersurveyanswerId).HasColumnName("customersurveyanswerId");
            entity.Property(e => e.AnswerId).HasColumnName("answerId");
            entity.Property(e => e.CustomersurveyId).HasColumnName("customersurveyId");

            entity.HasOne(d => d.Answer).WithMany(p => p.CustomerSurveyAnswers)
                .HasForeignKey(d => d.AnswerId)
                .HasConstraintName("FK__CustomerS__answe__0A9D95DB");

            entity.HasOne(d => d.Customersurvey).WithMany(p => p.CustomerSurveyAnswers)
                .HasForeignKey(d => d.CustomersurveyId)
                .HasConstraintName("FK__CustomerS__custo__09A971A2");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Feedback__2613FD242EE76794");

            entity.ToTable("Feedback");

            entity.HasIndex(e => e.CustomerId, "IX_Feedback_customerId");

            entity.Property(e => e.FeedbackId).HasColumnName("feedbackId");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Feedback__custom__73BA3083");
        });

        modelBuilder.Entity<QuizAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__QuizAnsw__6836B974A01114EA");

            entity.ToTable("QuizAnswer");

            entity.HasIndex(e => e.CustomerId, "IX_QuizAnswer_customerId");

            entity.HasIndex(e => e.QuizquestionId, "IX_QuizAnswer_quizquestionId");

            entity.HasIndex(e => e.SkintypeId, "IX_QuizAnswer_skintypeId");

            entity.Property(e => e.AnswerId).HasColumnName("answerId");
            entity.Property(e => e.Answer).HasColumnName("answer");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.QuizquestionId).HasColumnName("quizquestionId");
            entity.Property(e => e.ServiceImpact)
                .HasMaxLength(255)
                .HasColumnName("serviceImpact");
            entity.Property(e => e.SkintypeId).HasColumnName("skintypeId");

            entity.HasOne(d => d.Customer).WithMany(p => p.QuizAnswers)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__QuizAnswe__custo__7E37BEF6");

            entity.HasOne(d => d.Quizquestion).WithMany(p => p.QuizAnswers)
                .HasForeignKey(d => d.QuizquestionId)
                .HasConstraintName("FK__QuizAnswe__quizq__7F2BE32F");

            entity.HasOne(d => d.Skintype).WithMany(p => p.QuizAnswers)
                .HasForeignKey(d => d.SkintypeId)
                .HasConstraintName("FK__QuizAnswe__skint__00200768");
        });

        modelBuilder.Entity<QuizQuestion>(entity =>
        {
            entity.HasKey(e => e.QuizquestionId).HasName("PK__QuizQues__F5476D714DD95FEC");

            entity.ToTable("QuizQuestion");

            entity.HasIndex(e => e.QuestionsId, "IX_QuizQuestion_questionsId");

            entity.Property(e => e.QuizquestionId).HasColumnName("quizquestionId");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.QuestionsId).HasColumnName("questionsId");

            entity.HasOne(d => d.Questions).WithMany(p => p.QuizQuestions)
                .HasForeignKey(d => d.QuestionsId)
                .HasConstraintName("FK__QuizQuest__quest__7A672E12");
        });

        modelBuilder.Entity<QuizQuestionSet>(entity =>
        {
            entity.HasKey(e => e.QuestionsId).HasName("PK__QuizQues__E6446AF296DD0532");

            entity.ToTable("QuizQuestionSet");

            entity.Property(e => e.QuestionsId).HasColumnName("questionsId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Rating__2D290CA97E0DB2B2");

            entity.ToTable("Rating");

            entity.HasIndex(e => e.CustomerId, "IX_Rating_customerId");

            entity.Property(e => e.RatingId).HasColumnName("ratingId");
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Stars).HasColumnName("stars");

            entity.HasOne(d => d.Customer).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Rating__customer__6FE99F9F");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__Schedule__A532EDD4795F163A");

            entity.ToTable("Schedule");

            entity.HasIndex(e => e.SkinTherapistId, "IX_Schedule_skinTherapistId");

            entity.HasIndex(e => e.SlotId, "IX_Schedule_slotId");

            entity.Property(e => e.ScheduleId).HasColumnName("scheduleId");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.SkinTherapistId).HasColumnName("skinTherapistId");
            entity.Property(e => e.SlotId).HasColumnName("slotId");

            entity.HasOne(d => d.SkinTherapist).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.SkinTherapistId)
                .HasConstraintName("FK__Schedule__skinTh__5EBF139D");

            entity.HasOne(d => d.Slot).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.SlotId)
                .HasConstraintName("FK__Schedule__slotId__5FB337D6");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Services__455070DFCAF055F5");

            entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
        });

        modelBuilder.Entity<SkinTherapist>(entity =>
        {
            entity.HasKey(e => e.SkintherapistId).HasName("PK__SkinTher__AC166160E1B81E8D");

            entity.ToTable("SkinTherapist");

            entity.HasIndex(e => e.AccountId, "IX_SkinTherapist_accountId");

            entity.Property(e => e.SkintherapistId).HasColumnName("skintherapistId");
            entity.Property(e => e.AccountId).HasColumnName("accountId");
            entity.Property(e => e.Degree)
                .HasMaxLength(255)
                .HasColumnName("degree");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Experience)
                .HasMaxLength(255)
                .HasColumnName("experience");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Speciality)
                .HasMaxLength(255)
                .HasColumnName("speciality");

            entity.HasOne(d => d.Account).WithMany(p => p.SkinTherapists)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__SkinThera__accou__5165187F");
        });

        modelBuilder.Entity<SkinTherapistService>(entity =>
        {
            entity.HasKey(e => e.SkintherapistserviceId).HasName("PK__SkinTher__0F4BA1D27C9EA1BD");

            entity.ToTable("SkinTherapistService");

            entity.HasIndex(e => e.ServiceId, "IX_SkinTherapistService_serviceId");

            entity.HasIndex(e => e.SkintherapistId, "IX_SkinTherapistService_skintherapistId");

            entity.Property(e => e.SkintherapistserviceId).HasColumnName("skintherapistserviceId");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Experience)
                .HasMaxLength(255)
                .HasColumnName("experience");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            entity.Property(e => e.SkintherapistId).HasColumnName("skintherapistId");
            entity.Property(e => e.Speciality)
                .HasMaxLength(255)
                .HasColumnName("speciality");

            entity.HasOne(d => d.Service).WithMany(p => p.SkinTherapistServices)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__SkinThera__servi__6383C8BA");

            entity.HasOne(d => d.Skintherapist).WithMany(p => p.SkinTherapistServices)
                .HasForeignKey(d => d.SkintherapistId)
                .HasConstraintName("FK__SkinThera__skint__628FA481");
        });

        modelBuilder.Entity<SkinType>(entity =>
        {
            entity.HasKey(e => e.SkintypeId).HasName("PK__SkinType__4A6B74075F8CC227");

            entity.ToTable("SkinType");

            entity.Property(e => e.SkintypeId).HasColumnName("skintypeId");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.SkintypeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("skintypeName");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<SkintypeService>(entity =>
        {
            entity.HasKey(e => e.SkintypeServiceId).HasName("PK__Skintype__CC39B0BFBB6C850B");

            entity.ToTable("SkintypeService");

            entity.HasIndex(e => e.ServiceId, "IX_SkintypeService_serviceId");

            entity.HasIndex(e => e.SkintypeId, "IX_SkintypeService_skintypeId");

            entity.Property(e => e.SkintypeServiceId).HasColumnName("skintypeServiceId");
            entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            entity.Property(e => e.SkintypeId).HasColumnName("skintypeId");

            entity.HasOne(d => d.Service).WithMany(p => p.SkintypeServices)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__SkintypeS__servi__6754599E");

            entity.HasOne(d => d.Skintype).WithMany(p => p.SkintypeServices)
                .HasForeignKey(d => d.SkintypeId)
                .HasConstraintName("FK__SkintypeS__skint__66603565");
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__Slot__9C4A67135BE9F5DA");

            entity.ToTable("Slot");

            entity.HasIndex(e => e.BookingId, "IX_Slot_bookingId");

            entity.Property(e => e.SlotId).HasColumnName("slotId");
            entity.Property(e => e.BookingId).HasColumnName("bookingId");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Time)
                .HasMaxLength(50)
                .HasColumnName("time");

            entity.HasOne(d => d.Booking).WithMany(p => p.Slots)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__Slot__bookingId__5BE2A6F2");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}