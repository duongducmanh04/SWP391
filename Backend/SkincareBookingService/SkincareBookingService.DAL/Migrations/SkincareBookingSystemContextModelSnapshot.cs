// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkincareBookingService.DAL.Entities;

#nullable disable

namespace SkincareBookingService.DAL.Migrations
{
    [DbContext(typeof(SkincareBookingSystemContext))]
    partial class SkincareBookingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("accountName");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__F267251E9E4D1C6E");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__FA0AA72D075819E8");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Blog_customerId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("serviceName");

                    b.Property<int?>("SkintherapistId")
                        .HasColumnType("int")
                        .HasColumnName("skintherapistId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updateAt");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__C6D03BCD7E8456A4");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Booking_customerId");

                    b.HasIndex(new[] { "SkintherapistId" }, "IX_Booking_skintherapistId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<int?>("SkintypeId")
                        .HasColumnType("int")
                        .HasColumnName("skintypeId");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__B611CB7DEFF47A3D");

                    b.HasIndex(new[] { "AccountId" }, "IX_Customer_accountId");

                    b.HasIndex(new[] { "SkintypeId" }, "IX_Customer_skintypeId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.CustomerSurvey", b =>
                {
                    b.Property<int>("CustomersurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customersurveyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomersurveyId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int")
                        .HasColumnName("questionsId");

                    b.Property<int?>("SkintypeId")
                        .HasColumnType("int")
                        .HasColumnName("skintypeId");

                    b.HasKey("CustomersurveyId")
                        .HasName("PK__Customer__500667325476DE3A");

                    b.HasIndex(new[] { "CustomerId" }, "IX_CustomerSurvey_customerId");

                    b.HasIndex(new[] { "QuestionsId" }, "IX_CustomerSurvey_questionsId");

                    b.HasIndex(new[] { "SkintypeId" }, "IX_CustomerSurvey_skintypeId");

                    b.ToTable("CustomerSurvey", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.CustomerSurveyAnswer", b =>
                {
                    b.Property<int>("CustomersurveyanswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customersurveyanswerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomersurveyanswerId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answerId");

                    b.Property<int?>("CustomersurveyId")
                        .HasColumnType("int")
                        .HasColumnName("customersurveyId");

                    b.HasKey("CustomersurveyanswerId")
                        .HasName("PK__Customer__7C419B23EC9362B1");

                    b.HasIndex(new[] { "AnswerId" }, "IX_CustomerSurveyAnswer_answerId");

                    b.HasIndex(new[] { "CustomersurveyId" }, "IX_CustomerSurveyAnswer_customersurveyId");

                    b.ToTable("CustomerSurveyAnswer", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<int?>("QuizquestionId")
                        .HasColumnType("int")
                        .HasColumnName("quizquestionId");

                    b.Property<string>("ServiceImpact")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("serviceImpact");

                    b.Property<int?>("SkintypeId")
                        .HasColumnType("int")
                        .HasColumnName("skintypeId");

                    b.HasKey("AnswerId")
                        .HasName("PK__QuizAnsw__6836B974A01114EA");

                    b.HasIndex(new[] { "QuizquestionId" }, "IX_QuizAnswer_quizquestionId");

                    b.HasIndex(new[] { "SkintypeId" }, "IX_QuizAnswer_skintypeId");

                    b.ToTable("QuizAnswer", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("QuizquestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quizquestionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizquestionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int")
                        .HasColumnName("questionsId");

                    b.HasKey("QuizquestionId")
                        .HasName("PK__QuizQues__F5476D714DD95FEC");

                    b.HasIndex(new[] { "QuestionsId" }, "IX_QuizQuestion_questionsId");

                    b.ToTable("QuizQuestion", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizQuestionSet", b =>
                {
                    b.Property<int>("QuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("questionsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionsId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("QuestionsId")
                        .HasName("PK__QuizQues__E6446AF296DD0532");

                    b.ToTable("QuizQuestionSet", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ratingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    b.Property<int?>("Stars")
                        .HasColumnType("int")
                        .HasColumnName("stars");

                    b.HasKey("RatingId")
                        .HasName("PK__Rating__2D290CA97E0DB2B2");

                    b.HasIndex("ServiceId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Rating_customerId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scheduleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int?>("SkinTherapistId")
                        .HasColumnType("int")
                        .HasColumnName("skinTherapistId");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slotId");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Schedule__A532EDD4795F163A");

                    b.HasIndex(new[] { "SkinTherapistId" }, "IX_Schedule_skinTherapistId");

                    b.HasIndex(new[] { "SlotId" }, "IX_Schedule_slotId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<double?>("AverageStars")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProcedureDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("procedureDescription");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__455070DFCAF055F5");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinTherapist", b =>
                {
                    b.Property<int>("SkintherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skintherapistId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkintherapistId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Degree")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("degree");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Experience")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("experience");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Speciality")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("speciality");

                    b.HasKey("SkintherapistId")
                        .HasName("PK__SkinTher__AC166160E1B81E8D");

                    b.HasIndex(new[] { "AccountId" }, "IX_SkinTherapist_accountId");

                    b.ToTable("SkinTherapist", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinTherapistService", b =>
                {
                    b.Property<int>("SkintherapistserviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skintherapistserviceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkintherapistserviceId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Experience")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("experience");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    b.Property<int?>("SkintherapistId")
                        .HasColumnType("int")
                        .HasColumnName("skintherapistId");

                    b.Property<string>("Speciality")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("speciality");

                    b.HasKey("SkintherapistserviceId")
                        .HasName("PK__SkinTher__0F4BA1D27C9EA1BD");

                    b.HasIndex(new[] { "ServiceId" }, "IX_SkinTherapistService_serviceId");

                    b.HasIndex(new[] { "SkintherapistId" }, "IX_SkinTherapistService_skintherapistId");

                    b.ToTable("SkinTherapistService", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinType", b =>
                {
                    b.Property<int>("SkintypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skintypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkintypeId"));

                    b.Property<string>("Cons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("introduction");

                    b.Property<string>("Pros")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkincareGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkintypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("skintypeName");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("SkintypeId")
                        .HasName("PK__SkinType__4A6B74075F8CC227");

                    b.ToTable("SkinType", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkintypeService", b =>
                {
                    b.Property<int>("SkintypeServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skintypeServiceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkintypeServiceId"));

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    b.Property<int?>("SkintypeId")
                        .HasColumnType("int")
                        .HasColumnName("skintypeId");

                    b.HasKey("SkintypeServiceId")
                        .HasName("PK__Skintype__CC39B0BFBB6C850B");

                    b.HasIndex(new[] { "ServiceId" }, "IX_SkintypeService_serviceId");

                    b.HasIndex(new[] { "SkintypeId" }, "IX_SkintypeService_skintypeId");

                    b.ToTable("SkintypeService", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("slotId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("time");

                    b.HasKey("SlotId")
                        .HasName("PK__Slot__9C4A67135BE9F5DA");

                    b.HasIndex(new[] { "BookingId" }, "IX_Slot_bookingId");

                    b.ToTable("Slot", (string)null);
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Blog", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Customer", "Customer")
                        .WithMany("Blogs")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Blog__customerId__6B24EA82");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Booking", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Booking__custome__5812160E");

                    b.HasOne("SkincareBookingService.DAL.Entities.SkinTherapist", "Skintherapist")
                        .WithMany("Bookings")
                        .HasForeignKey("SkintherapistId")
                        .HasConstraintName("FK__Booking__skinthe__59063A47");

                    b.Navigation("Customer");

                    b.Navigation("Skintherapist");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Customer", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Customer__accoun__4E88ABD4");

                    b.HasOne("SkincareBookingService.DAL.Entities.SkinType", "Skintype")
                        .WithMany("Customers")
                        .HasForeignKey("SkintypeId")
                        .HasConstraintName("FK__Customer__skinty__4D94879B");

                    b.Navigation("Account");

                    b.Navigation("Skintype");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.CustomerSurvey", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Customer", "Customer")
                        .WithMany("CustomerSurveys")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__CustomerS__custo__06CD04F7");

                    b.HasOne("SkincareBookingService.DAL.Entities.QuizQuestionSet", "Questions")
                        .WithMany("CustomerSurveys")
                        .HasForeignKey("QuestionsId")
                        .HasConstraintName("FK__CustomerS__quest__05D8E0BE");

                    b.HasOne("SkincareBookingService.DAL.Entities.SkinType", "Skintype")
                        .WithMany("CustomerSurveys")
                        .HasForeignKey("SkintypeId")
                        .HasConstraintName("FK__CustomerS__skint__04E4BC85");

                    b.Navigation("Customer");

                    b.Navigation("Questions");

                    b.Navigation("Skintype");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.CustomerSurveyAnswer", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.QuizAnswer", "Answer")
                        .WithMany("CustomerSurveyAnswers")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK__CustomerS__answe__0A9D95DB");

                    b.HasOne("SkincareBookingService.DAL.Entities.CustomerSurvey", "Customersurvey")
                        .WithMany("CustomerSurveyAnswers")
                        .HasForeignKey("CustomersurveyId")
                        .HasConstraintName("FK__CustomerS__custo__09A971A2");

                    b.Navigation("Answer");

                    b.Navigation("Customersurvey");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizAnswer", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.QuizQuestion", "Quizquestion")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuizquestionId")
                        .HasConstraintName("FK__QuizAnswe__quizq__7F2BE32F");

                    b.HasOne("SkincareBookingService.DAL.Entities.SkinType", "Skintype")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("SkintypeId")
                        .HasConstraintName("FK__QuizAnswe__skint__00200768");

                    b.Navigation("Quizquestion");

                    b.Navigation("Skintype");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizQuestion", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.QuizQuestionSet", "Questions")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionsId")
                        .HasConstraintName("FK__QuizQuest__quest__7A672E12");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Rating", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Rating__customer__6FE99F9F");

                    b.HasOne("SkincareBookingService.DAL.Entities.Service", "Service")
                        .WithMany("Ratings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Service");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.SkinTherapist", "SkinTherapist")
                        .WithMany("Schedules")
                        .HasForeignKey("SkinTherapistId")
                        .HasConstraintName("FK__Schedule__skinTh__5EBF139D");

                    b.HasOne("SkincareBookingService.DAL.Entities.Slot", "Slot")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotId")
                        .HasConstraintName("FK__Schedule__slotId__5FB337D6");

                    b.Navigation("SkinTherapist");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinTherapist", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Account", "Account")
                        .WithMany("SkinTherapists")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__SkinThera__accou__5165187F");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinTherapistService", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Service", "Service")
                        .WithMany("SkinTherapistServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__SkinThera__servi__6383C8BA");

                    b.HasOne("SkincareBookingService.DAL.Entities.SkinTherapist", "Skintherapist")
                        .WithMany("SkinTherapistServices")
                        .HasForeignKey("SkintherapistId")
                        .HasConstraintName("FK__SkinThera__skint__628FA481");

                    b.Navigation("Service");

                    b.Navigation("Skintherapist");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkintypeService", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Service", "Service")
                        .WithMany("SkintypeServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__SkintypeS__servi__6754599E");

                    b.HasOne("SkincareBookingService.DAL.Entities.SkinType", "Skintype")
                        .WithMany("SkintypeServices")
                        .HasForeignKey("SkintypeId")
                        .HasConstraintName("FK__SkintypeS__skint__66603565");

                    b.Navigation("Service");

                    b.Navigation("Skintype");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Slot", b =>
                {
                    b.HasOne("SkincareBookingService.DAL.Entities.Booking", "Booking")
                        .WithMany("Slots")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Slot__bookingId__5BE2A6F2");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Account", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SkinTherapists");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Booking", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Customer", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Bookings");

                    b.Navigation("CustomerSurveys");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.CustomerSurvey", b =>
                {
                    b.Navigation("CustomerSurveyAnswers");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizAnswer", b =>
                {
                    b.Navigation("CustomerSurveyAnswers");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.QuizQuestionSet", b =>
                {
                    b.Navigation("CustomerSurveys");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Service", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("SkinTherapistServices");

                    b.Navigation("SkintypeServices");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinTherapist", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Schedules");

                    b.Navigation("SkinTherapistServices");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.SkinType", b =>
                {
                    b.Navigation("CustomerSurveys");

                    b.Navigation("Customers");

                    b.Navigation("QuizAnswers");

                    b.Navigation("SkintypeServices");
                });

            modelBuilder.Entity("SkincareBookingService.DAL.Entities.Slot", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
